services:

  # Production services
  
  mongo:
    container_name: mongo-${teamname:-wiq_es05b}
    image: mongo:latest
    profiles: ["dev", "prod"]
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - mynetwork
    restart: always

  webapp:
    container_name: webapp-${teamname:-wiq_es05b}
    image: ghcr.io/arquisoft/wiq_es05b/webapp:latest
    profiles: ["dev", "prod"]
    build:
      context: ./webapp
    depends_on:
      - gatewayservice
    networks:
      - mynetwork
    ports:
      - "3000:3000"
    restart: always

  gatewayservice:
    container_name: gatewayservice-${teamname:-wiq_es05b}
    image: ghcr.io/arquisoft/wiq_es05b/gatewayservice:latest
    profiles: ["dev", "prod"]
    build: ./gatewayservice
    depends_on:
      - userservice
      - authservice
      - jordi
      - history
    ports:
      - "8000:8000"
    networks:
      - mynetwork
    environment:
      USER_SERVICE_URL: http://userservice:8001
      AUTH_SERVICE_URL: http://authservice:8002
      JORDI_SERVICE_URL: http://jordi:8003
      HISTORY_SERVICE_URL: http://history:8004
    restart: always

  userservice:
    container_name: userservice-${teamname:-wiq_es05b}
    image: ghcr.io/arquisoft/wiq_es05b/userservice:latest
    profiles: ["dev", "prod"]
    build: ./users/userservice
    depends_on:
      - mongo
    ports:
      - "8001:8001"
    networks:
      - mynetwork
    environment:
      MONGODB_URI: mongodb://mongo:27017/userdb
    restart: always

  authservice:
    container_name: authservice-${teamname:-wiq_es05b}
    image: ghcr.io/arquisoft/wiq_es05b/authservice:latest
    profiles: ["dev", "prod"]
    build: ./users/authservice
    depends_on:
      - mongo
    ports:
      - "8002:8002"
    networks:
      - mynetwork
    environment:
      MONGODB_URI: mongodb://mongo:27017/userdb
      SECRET: a-very-secret-string
    restart: always

  jordi:
    container_name: jordi-${teamname:-wiq_es05b}
    image: ghcr.io/arquisoft/wiq_es05b/jordi:latest
    profiles: ["dev", "prod"]
    build: ./jordi
    depends_on:
      - mongo
    ports:
      - "8003:8003"
    networks:
      - mynetwork
    environment:
      MONGODB_URI: mongodb://mongo:27017/questions
    restart: always

  history:
    container_name: history-${teamname:-wiq_es05b}
    image: ghcr.io/arquisoft/wiq_es05b/history:latest
    profiles: ["dev", "prod"]
    build: ./userhistory
    depends_on:
      - mongo
    ports:
      - "8004:8004"
    networks:
      - mynetwork
    environment:
      MONGODB_URI: mongodb://mongo:27017/history
    restart: always

  reverse-proxy:
    container_name: reverse-proxy-${teamname:-wiq_es05b}
    image: ghcr.io/arquisoft/wiq_es05b/proxy:latest
    profiles: ["prod"]
    build: ./proxy
    depends_on:
      - gatewayservice
      - webapp
    ports:
      - "80:80"
      - "443:443"
    networks:
      - mynetwork
    restart: always

  elasticsearch:
    container_name: elasticsearch-${teamname:-wiq_es05b}
    image: ghcr.io/arquisoft/wiq_es05b/elasticsearch:latest
    profiles: ["prod"]
    build: logging/elastic
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - mynetwork
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      discovery.type: single-node
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-changeme}
    volumes:
      - elastic_data:/elasticsearch
    restart: always

  setupelk:
    container_name: setupelk-${teamname:-wiq_es05b}
    image: ghcr.io/arquisoft/wiq_es05b/setupelk:latest
    stop_signal: SIGINT
    profiles: ["prod"]
    build: logging/setup
    depends_on:
      - elasticsearch
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-changeme}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-changeme}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-changeme}
    networks:
      - mynetwork

  logstash:
    container_name: logstash-${teamname:-wiq_es05b}
    image: ghcr.io/arquisoft/wiq_es05b/logstash:latest
    profiles: ["prod"]
    build: logging/logstash
    depends_on:
      - elasticsearch
    ports:
      - "5044:5044"
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-changeme}
    networks:
      - mynetwork
    volumes:
      - logstash_data:/logstash
    restart: always

  kibana:
    container_name: kibana-${teamname:-wiq_es05b}
    image: ghcr.io/arquisoft/wiq_es05b/kibana:latest
    profiles: ["prod"]
    build: logging/kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    networks:
      - mynetwork
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-changeme}
    volumes:
      - kibana_data:/kibana
    restart: always

  # Development services

  prometheus:
    image: ghcr.io/arquisoft/wiq_es05b/prometheus:latest
    container_name: prometheus-${teamname:-wiq_es05b}
    build: ./monitoring/prometheus
    profiles: ["dev", "prod"]
    networks:
      - mynetwork
    volumes:
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on: 
      - gatewayservice
    restart:
      always
      
  grafana:
    image: ghcr.io/arquisoft/wiq_es05b/grafana:latest
    container_name: grafana-${teamname:-wiq_es05b}
    build: ./monitoring/grafana
    profiles: ["dev", "prod"]
    networks:
      - mynetwork
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SERVER_HTTP_PORT=9091
#      - GF_AUTH_DISABLE_LOGIN_FORM=true
#      - GF_AUTH_ANONYMOUS_ENABLED=true
#      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-changeme}
      - GF_SERVER_SERVE_FROM_SUB_PATH=${GF_SERVER_SERVE_FROM_SUB_PATH:-true}
      - GF_SERVER_DOMAIN=${GF_SERVER_DOMAIN:-}
      - GF_SERVER_PROTOCOL=${GF_SERVER_PROTOCOL:-}
    ports:
      - "9091:9091"
    depends_on: 
      - prometheus
    restart: always

volumes:
  mongo_data:
  elastic_data:
  kibana_data:
  logstash_data:
  prometheus_data:
  grafana_data:

networks:
  mynetwork:
    driver: bridge
